{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\resturant\\\\client\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Sidebar.css';\n// import monkeyImage from '../images/monkey.png';\n\n// const Sidebar = ({ setSelectedChat, messages }) => {\n//     const [searchTerm, setSearchTerm] = useState('');\n//     const [chatRooms, setChatRooms] = useState([]);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchChatRooms = async () => {\n//             setIsLoading(true);\n//             try {\n//                 const response = await new Promise((resolve) => {\n//                     setTimeout(() => {\n//                         resolve(['General Chat', 'Project Team', 'Designers']);\n//                     }, 1000);\n//                 });\n//                 setChatRooms(response);\n//             } catch (err) {\n//                 setError('Failed to fetch chat rooms');\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchChatRooms();\n//     }, []);\n\n//     const handleSearch = (event) => {\n//         setSearchTerm(event.target.value);\n//     };\n\n//     // Filter chat rooms based on search term\n//     const filteredChats = chatRooms.filter((chat) =>\n//         chat.toLowerCase().includes(searchTerm.toLowerCase())\n//     );\n\n//     return (\n//         <div className=\"sidebar\">\n//             <div>\n//                 <h1 className=\"chathead\">Chats</h1>\n//             </div>\n\n//             <div className=\"sidebar-search-container\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Search chats...\"\n//                     value={searchTerm}\n//                     onChange={handleSearch}\n//                     className=\"search-input\"\n//                     disabled={isLoading}\n//                 />\n//             </div>\n\n//             <div className=\"sidebar-chats\">\n//                 {isLoading && <p>Loading chat rooms...</p>}\n//                 {error && <p>{error}</p>}\n\n//                 {filteredChats.map((chat, index) => {\n//                     const lastMessage = messages[chat]?.[messages[chat].length - 1];\n//                     return (\n//                         <div\n//                             key={index}\n//                             className=\"chat-item\"\n//                             onClick={() => setSelectedChat(chat)}\n//                         >\n//                             <img src={monkeyImage} alt=\"contact\" className=\"contact-image\" />\n//                             <div className=\"chat-info\">\n//                                 <span className=\"chat-name\">{chat}</span>\n//                                 <p className=\"last-message\">\n//                                     {lastMessage ? `${lastMessage.user}: ${lastMessage.text}` : 'No messages yet'}\n//                                 </p>\n//                             </div>\n//                         </div>\n//                     );\n//                 })}\n\n//                 {filteredChats.length === 0 && !isLoading && (\n//                     <p>No chats found</p>\n//                 )}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Sidebar;\n\nimport React, { useState, useEffect } from 'react';\nimport './Sidebar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  setSelectedChat\n}) => {\n  _s();\n  const [chatRooms, setChatRooms] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchChatRooms = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch(\"http://localhost:4000/chatRooms\");\n        const data = await response.json();\n        setChatRooms(data);\n      } catch (err) {\n        setError(\"Failed to fetch chat rooms\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchChatRooms();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PMIT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-chats\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat rooms...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }, this), !isLoading && !error && chatRooms.length > 0 ? chatRooms.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setSelectedChat(chat),\n        className: \"chat-item\",\n        children: chat\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No chat rooms found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"bO+UcKUk1zImgoW+7+Tc9Hibo5A=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Sidebar","setSelectedChat","_s","chatRooms","setChatRooms","isLoading","setIsLoading","error","setError","fetchChatRooms","response","fetch","data","json","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","chat","index","onClick","_c","$RefreshReg$"],"sources":["C:/Project/resturant/client/src/components/Sidebar.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './Sidebar.css';\r\n// import monkeyImage from '../images/monkey.png';\r\n\r\n// const Sidebar = ({ setSelectedChat, messages }) => {\r\n//     const [searchTerm, setSearchTerm] = useState('');\r\n//     const [chatRooms, setChatRooms] = useState([]);\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [error, setError] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchChatRooms = async () => {\r\n//             setIsLoading(true);\r\n//             try {\r\n//                 const response = await new Promise((resolve) => {\r\n//                     setTimeout(() => {\r\n//                         resolve(['General Chat', 'Project Team', 'Designers']);\r\n//                     }, 1000);\r\n//                 });\r\n//                 setChatRooms(response);\r\n//             } catch (err) {\r\n//                 setError('Failed to fetch chat rooms');\r\n//             } finally {\r\n//                 setIsLoading(false);\r\n//             }\r\n//         };\r\n\r\n//         fetchChatRooms();\r\n//     }, []);\r\n\r\n//     const handleSearch = (event) => {\r\n//         setSearchTerm(event.target.value);\r\n//     };\r\n\r\n//     // Filter chat rooms based on search term\r\n//     const filteredChats = chatRooms.filter((chat) =>\r\n//         chat.toLowerCase().includes(searchTerm.toLowerCase())\r\n//     );\r\n\r\n//     return (\r\n//         <div className=\"sidebar\">\r\n//             <div>\r\n//                 <h1 className=\"chathead\">Chats</h1>\r\n//             </div>\r\n\r\n//             <div className=\"sidebar-search-container\">\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Search chats...\"\r\n//                     value={searchTerm}\r\n//                     onChange={handleSearch}\r\n//                     className=\"search-input\"\r\n//                     disabled={isLoading}\r\n//                 />\r\n//             </div>\r\n\r\n//             <div className=\"sidebar-chats\">\r\n//                 {isLoading && <p>Loading chat rooms...</p>}\r\n//                 {error && <p>{error}</p>}\r\n\r\n//                 {filteredChats.map((chat, index) => {\r\n//                     const lastMessage = messages[chat]?.[messages[chat].length - 1];\r\n//                     return (\r\n//                         <div\r\n//                             key={index}\r\n//                             className=\"chat-item\"\r\n//                             onClick={() => setSelectedChat(chat)}\r\n//                         >\r\n//                             <img src={monkeyImage} alt=\"contact\" className=\"contact-image\" />\r\n//                             <div className=\"chat-info\">\r\n//                                 <span className=\"chat-name\">{chat}</span>\r\n//                                 <p className=\"last-message\">\r\n//                                     {lastMessage ? `${lastMessage.user}: ${lastMessage.text}` : 'No messages yet'}\r\n//                                 </p>\r\n//                             </div>\r\n//                         </div>\r\n//                     );\r\n//                 })}\r\n\r\n//                 {filteredChats.length === 0 && !isLoading && (\r\n//                     <p>No chats found</p>\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Sidebar;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Sidebar.css';\r\n\r\nconst Sidebar = ({ setSelectedChat }) => {\r\n  const [chatRooms, setChatRooms] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchChatRooms = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/chatRooms\");\r\n        const data = await response.json();\r\n        setChatRooms(data);\r\n      } catch (err) {\r\n        setError(\"Failed to fetch chat rooms\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchChatRooms();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h1>PMIT</h1>\r\n      <div className=\"sidebar-chats\">\r\n        {isLoading && <p>Loading chat rooms...</p>}\r\n        {error && <p>{error}</p>}\r\n\r\n        {!isLoading && !error && chatRooms.length > 0 ? (\r\n          chatRooms.map((chat, index) => (\r\n            <div key={index} onClick={() => setSelectedChat(chat)} className=\"chat-item\">\r\n              {chat}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          !isLoading && <p>No chat rooms found</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}