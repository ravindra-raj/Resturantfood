{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\resturant\\\\client\\\\src\\\\components\\\\ChatWindow.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./ChatWindow.css\";\n// import monkey from \"../images/monkey.png\";\n\n// const ChatWindow = ({ selectedChat, messages }) => {\n//   const [chatMessages, setChatMessages] = useState(messages);\n\n//   useEffect(() => {\n//     setChatMessages(messages);\n//   }, [messages]);\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h3>{selectedChat}</h3>\n//       </div>\n//       <div className=\"chat-messages\">\n//         {chatMessages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.user === \"You\" ? \"sent\" : \"received\"}`}\n//           >\n//             <div className=\"message-avatar\">\n//               <img\n//                 src={monkey}\n//                 alt=\"\"\n//                 className=\"images\"\n//               />\n//             </div>\n//             <div className=\"message-text\">\n//               <strong>{msg.user}</strong>: {msg.text}\n//               <div className=\"message-time\">{msg.time}</div>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatWindow;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./ChatWindow.css\";\n// import monkey from \"../images/monkey.png\";\n\n// const ChatWindow = ({ selectedChat }) => {\n//   const [chatMessages, setChatMessages] = useState([]);\n\n//   // Fetch messages for the selected chat room when it changes\n//   useEffect(() => {\n//     const fetchMessages = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4000/messages/${selectedChat}`);\n//         const data = await response.json();\n//         setChatMessages(data);\n//       } catch (error) {\n//         console.error(\"Failed to fetch messages:\", error);\n//       }\n//     };\n\n//     if (selectedChat) {\n//       fetchMessages();\n//     }\n//   }, [selectedChat]);\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <h3>{selectedChat}</h3>\n//       </div>\n//       <div className=\"chat-messages\">\n//         {chatMessages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.user === \"You\" ? \"sent\" : \"received\"}`}\n//           >\n//             <div className=\"message-avatar\">\n//               <img src={monkey} alt=\"User avatar\" className=\"images\" />\n//             </div>\n//             <div className=\"message-text\">\n//               <strong>{msg.user}</strong> {/* User's name displayed above the message */}\n//               <div>{msg.message}</div> {/* Message text */}\n//               <div className=\"message-time\">{msg.timestamp}</div> {/* Timestamp */}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatWindow;\n\nimport React, { useState, useEffect } from \"react\";\nimport MessageInput from \"./MessageInput\";\nimport \"./ChatWindow.css\";\nimport monkey from \"../images/monkey.png\";\n\n// Utility function to format date and time\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = timestamp => {\n  const messageDate = new Date(timestamp);\n  const today = new Date();\n  const yesterday = new Date();\n  yesterday.setDate(today.getDate() - 1);\n  const isToday = messageDate.getDate() === today.getDate() && messageDate.getMonth() === today.getMonth() && messageDate.getFullYear() === today.getFullYear();\n  const isYesterday = messageDate.getDate() === yesterday.getDate() && messageDate.getMonth() === yesterday.getMonth() && messageDate.getFullYear() === yesterday.getFullYear();\n  const timeString = messageDate.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  if (isToday) {\n    return `Today, ${timeString}`;\n  } else if (isYesterday) {\n    return `Yesterday, ${timeString}`;\n  } else {\n    return messageDate.toLocaleDateString() + `, ${timeString}`;\n  }\n};\nconst ChatWindow = ({\n  selectedChat,\n  messages\n}) => {\n  _s();\n  const [chatMessages, setChatMessages] = useState([]);\n\n  // Fetch messages for the selected chat room when it changes\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/messages/${selectedChat}`);\n        const data = await response.json();\n        setChatMessages(data);\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n      }\n    };\n    if (selectedChat) {\n      fetchMessages();\n    }\n  }, [selectedChat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.user === \"You\" ? \"sent\" : \"received\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: monkey,\n            alt: \"User avatar\",\n            className: \"images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-text-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-user\",\n            children: msg.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: formatDate(msg.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 14\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"5wsma5tER8mHCm5T8+t0Oq4Ucks=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","MessageInput","monkey","jsxDEV","_jsxDEV","formatDate","timestamp","messageDate","Date","today","yesterday","setDate","getDate","isToday","getMonth","getFullYear","isYesterday","timeString","toLocaleTimeString","hour","minute","toLocaleDateString","ChatWindow","selectedChat","messages","_s","chatMessages","setChatMessages","fetchMessages","response","fetch","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","user","src","alt","message","_c","$RefreshReg$"],"sources":["C:/Project/resturant/client/src/components/ChatWindow.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./ChatWindow.css\";\r\n// import monkey from \"../images/monkey.png\";\r\n\r\n// const ChatWindow = ({ selectedChat, messages }) => {\r\n//   const [chatMessages, setChatMessages] = useState(messages);\r\n\r\n//   useEffect(() => {\r\n//     setChatMessages(messages);\r\n//   }, [messages]);\r\n\r\n//   return (\r\n//     <div className=\"chat-container\">\r\n//       <div className=\"chat-header\">\r\n//         <h3>{selectedChat}</h3>\r\n//       </div>\r\n//       <div className=\"chat-messages\">\r\n//         {chatMessages.map((msg, index) => (\r\n//           <div\r\n//             key={index}\r\n//             className={`message ${msg.user === \"You\" ? \"sent\" : \"received\"}`}\r\n//           >\r\n//             <div className=\"message-avatar\">\r\n//               <img\r\n//                 src={monkey}\r\n//                 alt=\"\"\r\n//                 className=\"images\"\r\n//               />\r\n//             </div>\r\n//             <div className=\"message-text\">\r\n//               <strong>{msg.user}</strong>: {msg.text}\r\n//               <div className=\"message-time\">{msg.time}</div>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatWindow;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./ChatWindow.css\";\r\n// import monkey from \"../images/monkey.png\";\r\n\r\n// const ChatWindow = ({ selectedChat }) => {\r\n//   const [chatMessages, setChatMessages] = useState([]);\r\n\r\n//   // Fetch messages for the selected chat room when it changes\r\n//   useEffect(() => {\r\n//     const fetchMessages = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:4000/messages/${selectedChat}`);\r\n//         const data = await response.json();\r\n//         setChatMessages(data);\r\n//       } catch (error) {\r\n//         console.error(\"Failed to fetch messages:\", error);\r\n//       }\r\n//     };\r\n\r\n//     if (selectedChat) {\r\n//       fetchMessages();\r\n//     }\r\n//   }, [selectedChat]);\r\n\r\n//   return (\r\n//     <div className=\"chat-container\">\r\n//       <div className=\"chat-header\">\r\n//         <h3>{selectedChat}</h3>\r\n//       </div>\r\n//       <div className=\"chat-messages\">\r\n//         {chatMessages.map((msg, index) => (\r\n//           <div\r\n//             key={index}\r\n//             className={`message ${msg.user === \"You\" ? \"sent\" : \"received\"}`}\r\n//           >\r\n//             <div className=\"message-avatar\">\r\n//               <img src={monkey} alt=\"User avatar\" className=\"images\" />\r\n//             </div>\r\n//             <div className=\"message-text\">\r\n//               <strong>{msg.user}</strong> {/* User's name displayed above the message */}\r\n//               <div>{msg.message}</div> {/* Message text */}\r\n//               <div className=\"message-time\">{msg.timestamp}</div> {/* Timestamp */}\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatWindow;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport \"./ChatWindow.css\";\r\nimport monkey from \"../images/monkey.png\";\r\n\r\n// Utility function to format date and time\r\nconst formatDate = (timestamp) => {\r\n  const messageDate = new Date(timestamp);\r\n  const today = new Date();\r\n  const yesterday = new Date();\r\n  yesterday.setDate(today.getDate() - 1);\r\n\r\n  const isToday = \r\n    messageDate.getDate() === today.getDate() &&\r\n    messageDate.getMonth() === today.getMonth() &&\r\n    messageDate.getFullYear() === today.getFullYear();\r\n\r\n  const isYesterday = \r\n    messageDate.getDate() === yesterday.getDate() &&\r\n    messageDate.getMonth() === yesterday.getMonth() &&\r\n    messageDate.getFullYear() === yesterday.getFullYear();\r\n\r\n  const timeString = messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n  if (isToday) {\r\n    return `Today, ${timeString}`;\r\n  } else if (isYesterday) {\r\n    return `Yesterday, ${timeString}`;\r\n  } else {\r\n    return messageDate.toLocaleDateString() + `, ${timeString}`;\r\n  }\r\n};\r\n\r\nconst ChatWindow = ({ selectedChat, messages }) => {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n\r\n    // Fetch messages for the selected chat room when it changes\r\n    useEffect(() => {\r\n      const fetchMessages = async () => {\r\n        try {\r\n          const response = await fetch(`http://localhost:4000/messages/${selectedChat}`);\r\n          const data = await response.json();\r\n          setChatMessages(data);\r\n        } catch (error) {\r\n          console.error(\"Failed to fetch messages:\", error);\r\n        }\r\n      };\r\n  \r\n      if (selectedChat) {\r\n        fetchMessages();\r\n      }\r\n    }, [selectedChat]);\r\n  \r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h3>{selectedChat}</h3>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${msg.user === \"You\" ? \"sent\" : \"received\"}`}\r\n          >\r\n            <div className=\"message-avatar\">\r\n              <img src={monkey} alt=\"User avatar\" className=\"images\" />\r\n            </div>\r\n             <div className=\"message-text-container\">\r\n              <div className=\"message-user\">{msg.user}</div>\r\n              <div className=\"message-text\">{msg.message}</div>\r\n              <div className=\"message-time\">{formatDate(msg.timestamp)}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}