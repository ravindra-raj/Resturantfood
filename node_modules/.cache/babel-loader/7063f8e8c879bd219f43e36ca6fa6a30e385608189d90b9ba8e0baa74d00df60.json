{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\resturant\\\\client\\\\src\\\\components\\\\MessageInput.jsx\";\n// import React from 'react';\n// import './ChatWindow';\n\n// const MessageInput = ({ message, setMessage, handleSendMessage }) => {\n//     return (\n//         <div className=\"message-input-container\">\n//             <input\n//                 type=\"text\"\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//                 placeholder=\"Type a message...\"\n//             />\n//             <button className='chat_button' onClick={handleSendMessage}>Send</button>\n//         </div>\n//     );\n// };\n\n// export default MessageInput;\nimport React, { useState } from 'react';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageInput = ({\n  message,\n  setMessage,\n  handleSendMessage\n}) => {\n  const sendMessage = async () => {\n    if (!message.trim()) return; // If the message is empty, don't send it\n\n    // Prepare message data to send to the backend\n    const messageData = {\n      chat_room: \"general\",\n      // Example: replace with the actual chat room you're in\n      user: \"Raj\",\n      // Example: replace with the actual user (you can pass user from parent component)\n      message: message.trim() // Message text\n    };\n    try {\n      // Send the message to the backend using fetch\n      const response = await fetch(\"http://localhost:4000/messages\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(messageData)\n      });\n      if (response.ok) {\n        console.log(\"Message sent successfully!\");\n        setMessage(''); // Clear input field after sending the message\n      } else {\n        console.error(\"Error sending message\");\n      }\n    } catch (error) {\n      console.error(\"Error while sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value) // Update message state\n      ,\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat_button\",\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_c = MessageInput;\nexport default MessageInput;\nvar _c;\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MessageInput","message","setMessage","handleSendMessage","sendMessage","trim","messageData","chat_room","user","response","fetch","method","headers","body","JSON","stringify","ok","console","log","error","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Project/resturant/client/src/components/MessageInput.jsx"],"sourcesContent":["// import React from 'react';\r\n// import './ChatWindow';\r\n\r\n// const MessageInput = ({ message, setMessage, handleSendMessage }) => {\r\n//     return (\r\n//         <div className=\"message-input-container\">\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={message}\r\n//                 onChange={(e) => setMessage(e.target.value)}\r\n//                 placeholder=\"Type a message...\"\r\n//             />\r\n//             <button className='chat_button' onClick={handleSendMessage}>Send</button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MessageInput;\r\nimport React, { useState } from 'react';\r\nimport './ChatWindow.css';\r\n\r\nconst MessageInput = ({ message, setMessage, handleSendMessage }) => {\r\n\r\n    const sendMessage = async () => {\r\n        if (!message.trim()) return; // If the message is empty, don't send it\r\n\r\n        // Prepare message data to send to the backend\r\n        const messageData = {\r\n            chat_room: \"general\",  // Example: replace with the actual chat room you're in\r\n            user: \"Raj\",           // Example: replace with the actual user (you can pass user from parent component)\r\n            message: message.trim() // Message text\r\n        };\r\n\r\n        try {\r\n            // Send the message to the backend using fetch\r\n            const response = await fetch(\"http://localhost:4000/messages\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(messageData)\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log(\"Message sent successfully!\");\r\n                setMessage(''); // Clear input field after sending the message\r\n            } else {\r\n                console.error(\"Error sending message\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error while sending message:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"message-input-container\">\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)} // Update message state\r\n                placeholder=\"Type a message...\"\r\n            />\r\n            <button className='chat_button' onClick={sendMessage}>Send</button> {/* Send button triggers sendMessage */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageInput;\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,UAAU;EAAEC;AAAkB,CAAC,KAAK;EAEjE,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC;;IAE7B;IACA,MAAMC,WAAW,GAAG;MAChBC,SAAS,EAAE,SAAS;MAAG;MACvBC,IAAI,EAAE,KAAK;MAAY;MACvBP,OAAO,EAAEA,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI;MACA;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;MACpC,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACO,EAAE,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzChB,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MACpB,CAAC,MAAM;QACHe,OAAO,CAACE,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;EAED,oBACIpB,OAAA;IAAKqB,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACpCtB,OAAA;MACIuB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEtB,OAAQ;MACfuB,QAAQ,EAAGC,CAAC,IAAKvB,UAAU,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;MAAA;MAC7CI,WAAW,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFhC,OAAA;MAAQqB,SAAS,EAAC,aAAa;MAACY,OAAO,EAAE5B,WAAY;MAAAiB,QAAA,EAAC;IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEd,CAAC;AAACE,EAAA,GA5CIjC,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}